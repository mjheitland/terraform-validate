name: terraform-module-validate
description: |
  Pipeline for Terraform Modules to validate the module. This action is usually
  run on Pull Request creation and updates.

inputs:
  working-directory:
    description: Directory containing the Terraform module code. (default = ".")
    default: '.'
    required: false
  go-version:
    description: Go version used for running the terratest tests.
    default: "1.18"
    required: false

runs:
  using: composite

  steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: ${{ github.event.pull_request.head.sha }}

    - name: setup
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: format
      id: fmt
      shell: bash
      continue-on-error: true
      run: terraform -chdir="${{ inputs.working-directory }}" fmt -recursive -check

    - name: init
      id: init
      shell: bash
      run: terraform -chdir="${{ inputs.working-directory }}" init -upgrade

    - name: validate
      id: validate
      continue-on-error: true
      shell: bash
      run: terraform -chdir="${{ inputs.working-directory }}" validate -no-color

    - name: cache
      uses: actions/cache@v3
      with:
        path: ~/.tflint.d/plugins
        key: tflint-${{ hashFiles('.tflint.hcl') }}

    - name: tflint-setup
      uses: terraform-linters/setup-tflint@v2
      with:
        github_token: ${{ github.token }}

    - name: setup-golang
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.go-version }}

    - name: tflint-setup-plugins
      shell: bash
      run: |
          go version
          GOBIN="${PWD}/.bin"
          mkdir -p "${GOBIN}"
          GOBIN="${GOBIN}" go install github.com/terraform-linters/tflint-ruleset-aws@latest
          GOBIN="${GOBIN}" go install github.com/terraform-linters/tflint-ruleset-google@latest
          GOBIN="${GOBIN}" go install github.com/terraform-linters/tflint-ruleset-azurerm@latest
          mkdir -p ~/.tflint.d/plugins
          cp -f "${GOBIN}/tflint-ruleset-aws" ~/.tflint.d/plugins
          cp -f "${GOBIN}/tflint-ruleset-google" ~/.tflint.d/plugins
          cp -f "${GOBIN}/tflint-ruleset-azurerm" ~/.tflint.d/plugins

    - name: tflint
      id: tflint
      continue-on-error: true
      shell: bash
      run: |
        tflint --version
        tflint --format=compact "${{ inputs.working-directory }}"
        tflint --format=sarif "${{ inputs.working-directory }}" >${{ inputs.working-directory}}/tflint.sarif

    # - name: post-tflint-results
    #   continue-on-error: true
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     sarif_file: ${{ inputs.working-directory}}/tflint.sarif
    #     category: tflint

    - name: tfsec
      id: tfsec
      continue-on-error: true
      uses: aquasecurity/tfsec-sarif-action@v0.1.4
      with:
        working_directory: ${{ inputs.working-directory }}
        sarif_file: tfsec.sarif

    - name: post-tfsec-comments
      uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
      if: github.event.name == 'pull_request'
      with:
        github_token: ${{ github.token }}
        working_directory: terraform

    # - name: post-tfsec-results
    #   continue-on-error: true
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     sarif_file: terraform/tfsec.sarif
    #     category: tfsec

    - name: exit-on-error
      shell: bash
      if: |
        steps.fmt.outcome == 'failure' ||
        steps.validate.outcome == 'failure' ||
        steps.tflint.outcome == 'failure' ||
        steps.tfsec.outcome == 'failure'
      run: exit 1
